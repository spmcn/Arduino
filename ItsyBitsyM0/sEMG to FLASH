#include <SPI.h>
#include <Adafruit_SPIFlash.h>
#include <Adafruit_SPIFlash_FatFs.h>
#include <SparkFunMPU9250-DMP.h>
#include <RTCZero.h>

// Include the FatFs library header to use its low level functions
// directly.  Specifically the f_fdisk and f_mkfs functions are used
// to partition and create the filesystem.
#include "utility/ff.h"

// Configuration of the flash chip pins and flash fatfs object.
// You don't normally need to change these if using a Feather/Metro
// M0 express board.
#define FLASH_TYPE     SPIFLASHTYPE_W25Q16BV  // Flash chip type.
#define FLASH_SS       SS1                    // Flash chip SS pin.
#define FLASH_SPI_PORT SPI1                   // What SPI port is Flash on?
#define NEOPIN         40
#define FILE_NAME      "data.csv"
Adafruit_SPIFlash flash(FLASH_SS, &FLASH_SPI_PORT);     // Use hardware SPI
Adafruit_W25Q16BV_FatFs fatfs(flash);

#define WAIT 3 // seconds to wait until formatting

boolean r = false; // TRUE: READING, FALSE: WRITING
boolean sEMG_present = false;
unsigned int count = 0;
unsigned int count_max = 5;
unsigned int total = 0;
unsigned int total_max = 2;
unsigned long startTime = 0;
unsigned long endTime = 0;


MPU9250_DMP imu;
RTCZero rtc;

void setup() {
  // Initialize serial port and wait for it to open before continuing.
  Serial.begin(115200);
  while (!Serial) {
    delay(100);
  }

  // Set up the real-time counter
  rtc.begin(); // initialize rtc
  rtc.setTime(0, 0, 0);
  rtc.setDate(0, 0, 0);
  printTime();
  startTime = millis();

  // format and mount flash file system
  if (format()) Serial.println("\n\nFormatting has been stopped...");

  // ask if sEMG is present
  while (1)
  {
    Serial.println("Do you have an sEMG present? (Y/N)");
    while (Serial.available() == 0) delay(100);
    if (Serial.available() > 0)
    {
      char a = Serial.read();
      if (a == 'Y') sEMG_present = true;
      else if (a == 'N') sEMG_present = false;
      else
      {
        Serial.println("Input not accepted, try again ...");
        continue;
      }
      break;
    }
  }

void loop() {

  // Stop storing/reading data after a certain number of reads

  if (total > total_max)
  {
    endTime = millis();
    Serial.println("\nCompleted sensor storage/reading");
    printTime();
    Serial.println(endTime - startTime);
    while (1) delay(100);
  }


  else {

    // After storing 5 sensor readings,
    // read the file to verify correct operation
    if (++count > 5)
    {
      total++;
      count = 0;
      printFileContents(FILE_NAME);
    }

    else {

      // Read sensor and write sensor data to file
      File dataFile = fatfs.open(FILE_NAME, FILE_WRITE);
      if (dataFile) {
        int16_t sEMGValue;
        if (sEMG_present && sEMG.dataReady())
        {
          imu.update(UPDATE_sEMGValue);
          sEMGValue = analogread(analogInPin);
          
        }
        else
        {
          sEMGValue = random(-5,-1);
          
        }

        // Write a line to the file.
        // Write comma separated values
        if (rtc.getHours() < 10) dataFile.print("0");
        dataFile.print(rtc.getHours());
        dataFile.print(":");
        if (rtc.getMinutes() < 10) dataFile.print("0");
        dataFile.print(rtc.getMinutes());
        dataFile.print(":");
        if (rtc.getSeconds() < 10) dataFile.print("0");
        dataFile.print(rtc.getSeconds());
        dataFile.print(",");
        dataFile.print(sEMGValue, DEC);
        dataFile.println();

        // Finally close the file when done writing.  This is smart to do to make
        // sure all the data is written to the file.
        dataFile.close();
        Serial.print("Wrote new measurement to data file: ");
        Serial.println("(sEMGValue): (" + String(sEMGValue) ")");
      }
      else {
        Serial.println("Failed to open data file for writing!");
      }
    }

    // Wait 1 seconds.
    delay(1000L);
  }
}

int format() {

  // Initialize flash library and check its chip ID.
  if (!flash.begin(FLASH_TYPE)) {
    Serial.println("Error, failed to initialize flash chip!");
    while (1);
  }
  Serial.print("Flash chip JEDEC ID: 0x"); Serial.println(flash.GetJEDECID(), HEX);
  Serial.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
  Serial.println("This sketch will ERASE ALL DATA on the flash chip and format it with a new filesystem!");
  Serial.print("Flash will be formated in ");
  Serial.print(WAIT);
  Serial.println(" seconds... Type 'STOP' to prevent formatting.");
  Serial.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
  Serial.setTimeout(1000);

  int countdown = WAIT;
  while (countdown) {
    if (Serial.find("STOP")) return 1;
    Serial.print(countdown--);
    Serial.print("... ");
  }

  fatfs.activate();

  // Partition the flash with 1 partition that takes the entire space.
  Serial.println("\nPartitioning flash with 1 primary partition...");
  DWORD plist[] = {100, 0, 0, 0};  // 1 primary partition with 100% of space.
  uint8_t buf[512] = {0};          // Working buffer for f_fdisk function.
  FRESULT r = f_fdisk(0, plist, buf);
  if (r != FR_OK) {
    Serial.print("Error, f_fdisk failed with error code: "); Serial.println(r, DEC);
    while (1);
  }
  Serial.println("Partitioned flash!");

  // Make filesystem.
  Serial.println("Creating and formatting FAT filesystem (this takes ~60 seconds)...");
  r = f_mkfs("", FM_ANY, 0, buf, sizeof(buf));
  if (r != FR_OK) {
    Serial.print("Error, f_mkfs failed with error code: "); Serial.println(r, DEC);
    while (1);
  }
  Serial.println("Formatted flash!");

  // Test that the file system is mounted
  if (!fatfs.begin()) {
    Serial.println("Error, failed to mount newly formatted filesystem!");
    while (1);
  }
  Serial.println("Flash chip successfully formatted with new empty filesystem!");

  return 0;
}

void printTime() {
  // Prints time in HH:MM:SS format
  Serial.print("Time: ");
  if (rtc.getHours() < 10) Serial.print("0");
  Serial.print(rtc.getHours());
  Serial.print(":");
  if (rtc.getMinutes() < 10) Serial.print("0");
  Serial.print(rtc.getMinutes());
  Serial.print(":");
  if (rtc.getSeconds() < 10) Serial.print("0");
  Serial.println(rtc.getSeconds());
}

void printFileContents(String fileName) {
  File dataFile = fatfs.open(fileName, FILE_READ);
  if (!dataFile) {
    Serial.println("Error, failed to open file for reading!");
    while (1);
  }

  // read all the data and print it out a character at a time
  // (stopping when end of file is reached):
  Serial.println("\nEntire contents of file:");
  while (dataFile.available()) {
    char c = dataFile.read();
    Serial.print(c);
  }

  // Print the total size of file
  Serial.print("Total size of file (bytes): ");
  Serial.print(dataFile.size());
  Serial.print(" (");
  Serial.print((float)(dataFile.size()) / (1024 * 1024), DEC);
  Serial.println(" MB)");
  Serial.println();

  dataFile.close();
}
